// Copyright (C) 2005-2012 Bristle Software, Inc.
// 
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 1, or (at your option)
// any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc.

package com.bristle.javalib.sql;

import java.sql.Connection;
import java.sql.Statement;
import java.sql.PreparedStatement;
import java.sql.CallableStatement;
import java.sql.DatabaseMetaData;
import java.sql.SQLWarning;
import java.sql.Savepoint;
import java.sql.SQLException;

import java.util.Map;

// DummyConnection
/******************************************************************************
* This implements dummy Connection for testing purposes.
*<pre>
*<b>Usage:</b>
*<b>Assumptions:</b>
*<b>Effects:</b>
*<b>Anticipated Changes:</b>
*<b>Notes:</b>
*<b>Implementation Notes:</b>
*<b>Portability Issues:</b>
*<b>Revision History:</b>
*   $Log$
*</pre>
******************************************************************************/
public class DummyConnection implements Connection
{
    public Statement createStatement() throws SQLException { return null; }
    public PreparedStatement prepareStatement(String sql) throws SQLException { return null; }
    public CallableStatement prepareCall(String sql) throws SQLException { return null; } 
    public String nativeSQL(String sql) throws SQLException { return null; }
    public void setAutoCommit(boolean autoCommit) throws SQLException {}
    public boolean getAutoCommit() throws SQLException { return false; }
    public void commit() throws SQLException {}
    public void rollback() throws SQLException {}
    public void close() throws SQLException {}
    public boolean isClosed() throws SQLException { return false; }
    public DatabaseMetaData getMetaData() throws SQLException { return null; }
    public void setReadOnly(boolean readOnly) throws SQLException {}
    public boolean isReadOnly() throws SQLException { return false; }
    public void setCatalog(String catalog) throws SQLException {}
    public String getCatalog() throws SQLException { return null; }
    public void setTransactionIsolation(int level) throws SQLException {}
    public int getTransactionIsolation() throws SQLException { return 0; }
    public SQLWarning getWarnings() throws SQLException { return null; }
    public void clearWarnings() throws SQLException {}
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException { return null; }
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException { return null; }
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException { return null; }
    public Map getTypeMap() throws SQLException { return null; }
    public void setTypeMap(java.util.Map map) throws SQLException {}
    public void setHoldability(int holdability) throws SQLException {}
    public int getHoldability() throws SQLException { return 0; }
    public Savepoint setSavepoint() throws SQLException { return null; }
    public Savepoint setSavepoint(String name) throws SQLException { return null; }
    public void rollback(Savepoint savepoint) throws SQLException {}
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {}
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException { return null; }
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException { return null; }
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException { return null; }
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException { return null; }
    public PreparedStatement prepareStatement(String sql, int columnIndexes[]) throws SQLException { return null; }
    public PreparedStatement prepareStatement(String sql, String columnNames[]) throws SQLException { return null; }
}
